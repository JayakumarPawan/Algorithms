import sys

num_win = int(sys.argv[1])
height = int(sys.argv[2])
width = int(sys.argv[3])

game_tree = {} #string representing game move sequence: board this sequence leads to
board_space= set() # set of all possible boards
game_space = set()
x_wins = set() #set of all possible boards where x wins
o_wins = set() #set of all possible boards where o wins
ties = set() #set of all possible terminal boards where nobody wins

def is_terminal(board,i):
    ix = i%width
    iy = i//width
    sr = i-ix
    er = i+ width-ix
    win = board[sr:er]
    if win.find(num_win*'o') != -1:
        o_wins.add(board)
        return True
    if win.find(num_win*'x') != -1:
        x_wins.add(board)
        return True
    sc = ix
    ec = len(board)-width+ix
    win = board[slice(sc,ec+1,width)]
    if win.find(num_win*'o') != -1:
        o_wins.add(board)
        return True
    if win.find(num_win*'x') != -1:
        x_wins.add(board)
        return True
    if abs(ix-iy) <= 0+(width-height):
        sd = abs(ix-iy)
        ed = sd+(width+1)*(num_win-1)
        win = board[slice(sd,ed+1,width+1)]
        if win.find(num_win*'o') != -1:
            o_wins.add(board)
            return True
        if win.find(num_win*'x') != -1:
            x_wins.add(board)
            return True
    if abs(ix+iy) >= width -1 - (width-height):
        st = abs(ix+iy)
        et = st+(width-1)*(num_win-1)
        win = board[slice(st,et+1,width-1)]
        if win.find(num_win*'o') != -1:
            o_wins.add(board)
            return True
        if win.find(num_win*'x') != -1:
            x_wins.add(board)
            return True
    if board.count('.') == 0:
        ties.add(board)
        return True
    return False


def print_board(board,height,width):
    for i in range(len(board)):
        if i%width ==0 :
            print("")
        print(board[i],end="")
    print("")


def bfs():
    game = ''
    game_tree[game] = '.........'
    board_space.add(game_tree[game])
    players = ('o','x')
    q = [('',True)] #goes first
    for state in q:
        game,turn = state
        board = [*game_tree[game]]
        for index in range(len(board)):
            if board[index] !='.':
                continue
            board[index] = players[turn]
            next_move = "{}_{}{}".format(game,index,players[turn])
            next_board = ''.join(board)
            board[index] = '.'
            game_tree[next_move] = next_board
            board_space.add(next_board)
            if is_terminal(next_board,index): #updates the terminal sets
                game_space.add(next_move)
            else:
                q.append((next_move,not turn))






bfs()
print("Number of possible games: {}\nTotal number of boards possible: {}".format(len(game_space),len(board_space)))
print("Number of boards x wins: {} \nNumber of boards o wins: {}".format(len(x_wins),len(o_wins)))
print("Number of boards there is a tie: {}".format(len(ties)))
print("Number of terminal boards: {}".format(len(x_wins)+len(o_wins)+len(ties)))
